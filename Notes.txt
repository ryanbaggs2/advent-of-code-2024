Day 1:

Part 1:
Distance between Location IDs.

Building the arrays O(logn):
read the text file into a buffer
read line
parse line into left and right array

Calculate distance O(n):
sort array
distance between smallest for both, then second smallest for both, and so on (absolute value)
get the total distance between the two lists
print the answer

Part 2:
How often does each number from the left list appear in the right list?

don't need to sort.

create new hash set
if key in set increment its counter
else add key to set, set its counter to one

create score list
for each item in left list
if item is in hash set, multiply by counter, add to score list
no else case, we just skip

Day 2:

Part 1:
One report per line, a single number is a level, separated by spaces
all decreasing or all increasing are safe
differ by at least 1, and at most (==) 3

loop for each line (report)
parse data into vec of numbers
if left == right report is unsafe
if difference > 3 return unsafe

if left > right decreasing_check
if left < right increasing_check

check:
loop through whole vec
if left <= || => right return unsafe
if difference > 3 return unsafe

Part 2:
This time I'm thinking we use a for loop and get the differences between 
each of the values.
put differences between values into vec
initialize positive_quantity and negative_quantity
initialize bad_levels

loop over differences
if pos increment pos
if neg increment neg
if 0 increment bad_levels
if > 3 increment bad_levels



add smaller quantity and bad_levels