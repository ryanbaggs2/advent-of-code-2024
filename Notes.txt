Day 1:

Part 1:
Distance between Location IDs.

Building the arrays O(logn):
read the text file into a buffer
read line
parse line into left and right array

Calculate distance O(n):
sort array
distance between smallest for both, then second smallest for both, and so on (absolute value)
get the total distance between the two lists
print the answer

Part 2:
How often does each number from the left list appear in the right list?

don't need to sort.

create new hash set
if key in set increment its counter
else add key to set, set its counter to one

create score list
for each item in left list
if item is in hash set, multiply by counter, add to score list
no else case, we just skip

Day 2:

Part 1:
One report per line, a single number is a level, separated by spaces
all decreasing or all increasing are safe
differ by at least 1, and at most (==) 3

loop for each line (report)
parse data into vec of numbers
if left == right report is unsafe
if difference > 3 return unsafe

if left > right decreasing_check
if left < right increasing_check

check:
loop through whole vec
if left <= || => right return unsafe
if difference > 3 return unsafe

Part 2:

CS Jackie's solution on YouTube ended up being the solution I used,
What I learned is that I need to not be afraid of coming up with an
O(n^2) solution, it's always better to have a solution than not. Also,
I need to consider if the data gets modified along the way, for example
the report was set to mutable when performing the safe_better function, so
I should have expected the values to be mutated and made a copy of the
original report.

Performing chain operations is a great way to create clean solutions if
you need to iterate over values. the iter().all() function is a great way to
check if some predicate is true across all values in a collection.

Here's the link to her YouTube video solution:
https://www.youtube.com/watch?v=sghAbg0WKt8

Here's the problem, it's with absolute value of 3.
9 7 6 2 1
if we remove 6 or any of those we still have an unsafe report
we would have to remove the bad_level and differences would have to be redone if we did it this way

This time I'm thinking we use a for loop and get the differences between 
each of the values.
put differences between values into vec
initialize positive_quantity and negative_quantity
initialize bad_levels

loop over differences
if pos increment pos
if neg increment neg
if 0 increment bad_levels
if > 3 increment bad_levels

add smaller quantity and bad_levels

Day 3

Part 1:

This looks like it can be solved with regular expressions.
I'm going to use the regex crate to assist with this
I'm also going to start this off with a test string that should match successfully

read input
make a new regex pattern r"mul\(([0-9]{1,3})\,([0-9]{1,3})\)" // greedy

for string in input
iterate over captures assigning to Vec of the values as &str
for pair of values multiply
add result to total

print result.

part 2:
this looks like it's going to require a flag, to only keep the most recent
do() or don't() instruction
At start of program, instructions are enabled, flag is true.

// The last pattern will be last checked as long as the other two don't apply.
make regex pattern (r"mul\(([0-9]{1,3})\,([0-9]{1,3})\)")
set flag do to true
current_mul_index
set hay
set hay_substring
set result

loop:
if mul() instruction found
set index to first found mul() instruction position
else break;

pop substring of everything prior to current index
rfind() for indexes of do/don't
match
both Some() -> find the greater index, set flag to that instruction
one Some() -> set flag to that instruction
// both None we can ignore, no change to flag

if flag perform multiplication, add to result
// flag false we can ignore mul instruction, no change in result.

// End loop

print result

Ended up using a slightly different solution, but this works even if it's not super elegant.
The reason I couldn't use above was that I couldn't get the values from the instruction 
while also getting the index of where it was.

Day 4:

Part 1:
horizontal forward/backwards
diagonals forward and backwards

This will be an O(n) solution
To handle the upside down diagonals, we can reverse the whole word_search

for each line in word_search

check if end of line is less than 4 characters away, if it is, next line.

horizontal:
take string slice of 4 characters, see if they match XMAS or SAMX
if match, increment counter

diagonal:
get slice of string 4 times for top left to bottom right characters, see if they match XMAS or SAMX
if match, increment counter

reverse whole word_search, may need to recombine it and see if it
run diagonal again.

print the count

140 * 140 input.
